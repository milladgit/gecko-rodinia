Rodinia Benchmark Suite 2.2 - With Gecko Directives 
===================================================

I. Overview

The University of Virginia Rodinia Benchmark Suite is a collection of parallel programs which targets 
heterogeneous computing platforms with both multicore CPUs and GPUs.

II. Usage

1. Pakage Structure

rodinia_2.x/bin		: binary executables
rodinia_2.x/common	: common configuration file
rodinia_2.x/cuda	: source code for the CUDA implementations
rodinia_2.x/data	: input files
rodinia_2.x/openmp	: source code for the OpenMP implementations
rodinia_2.x/opencl	: source code for the OpenCL implementations
rodinia_2.x/gecko	: source code for the Gecko implementations

2. Build Rodinia

Install the CUDA drivers, SDK and toolkit on your machine. 

Install the latest PGI compiler.

Install the directive-based implementation of Gecko from following URL:
https://github.com/milladgit/rodinia


In order to save space, the "data" folder was not cloned from the original repository. 
As a result, to have the "data" folder, please clone the original Rodinia repository for their "data" folder. 
The current "data" folder in this project is a handler for "../rodinia/data". So, the original Rodinia folder should be accessible from the parent folder. 

The original repository is available in following URLs:
https://github.com/qbunia/rodinia
https://github.com/pathscale/rodinia
https://github.com/milladgit/rodinia


Modify the rodinia_2.x/common/make.config file to change the settings of rodinia home directory and CUDA/OCL library paths.

To compile all the programs of the Rodinia benchmark suite, simply use the universal make file to compile all the programs, or go to each 
benchmark directory and make individual programs. 

3. Run Rodinia

There is a 'run' file specifying the sample command to run each program.

IV. Change Log
Oct. 24, 2019: Gecko-Rodinia (Millad Ghane)
        - The implementation of Rodinia with Gecko's Directives

Oct. 09, 2012: Rodinia 2.2 is released
        - BFS: Delete invalid flag CL_MEM_USE_HOST_PTR from _clMallocRW and _clMalloc functions in opencl verion. Thanks Alexey Kravets (CARP European research project).
        - Hotspot: hotspot_kernel.cl:61 correct the index calculation as grid_cols *loadYidx + loadXidx. Correct the same problem in hotspot.cu:152. Thanks Alexey Kravets.
        - Pathfinder: Added two __syncthreads in dynproc_kernel function of CUDA version to avoid data race. Thanks Ronny Krashinsky(Nvidia company) and Jiayuan Meng(Argonne National Laboratory). Alexey Kravets found and corrected the same problem in opencl version. 
        - SRAD: Replace CUDA function __syncthreads() in srad OpenCL kernel with OpenCL barrier(CLK_LOCAL_MEM_FENCE).
        - NN: Fixed the bug of CUDA version on certain input sizes. The new version detects excess of x-dimension size limit of a CUDA block grid and executes a two-dimensional grid if needed.(Only cuda version has this problem)
        - Promote B+Tree to main distribution (with output)
        - Promote Myocyte to main distribution (with output)
	
June 27, 2012: Rodinia 2.1 is released
	- Include fixes for SRAD, Heartwall, Particle Filter and Streamcluster
Nov 23, 2011: Rodinia 2.0.1 is released
	- Include a CUDA version of NN comparable to the OCL version.
	- Use a new version of clutils that is BSD, not GPL.
Nov 11, 2011: Rodinia 2.0 is released
	- Include several applications into the main suite:
	  lavaMD, Gaussian Elimination, Pathfinder, k-Nearest Neighbor and Particle Filter. 
	  Detailed application information can also be found at http://lava.cs.virginia.edu/wiki/rodinia
	- Merge new OpenCL implementations into the main tarball.
Mar 01, 2010: Rodinia 1.0 is released

III. Contact

Millad Ghane (mghane2@uh.edu)
Sunita Chandrasekaran (schandra@udel.edu)
Margaret S. Cheung (mscheung@central.uh.edu)


Rodinia wiki: 

http://lava.cs.virginia.edu/wiki/rodinia
